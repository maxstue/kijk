/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WelcomeRouteImport } from './routes/welcome'
import { Route as SsoCallbackRouteImport } from './routes/sso-callback'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as ProtectedSettingsRouteImport } from './routes/_protected/settings'
import { Route as ProtectedResourcesRouteImport } from './routes/_protected/resources'
import { Route as ProtectedHomeRouteImport } from './routes/_protected/home'
import { Route as ProtectedConsumptionsLimitsRouteImport } from './routes/_protected/consumptions-limits'
import { Route as ProtectedConsumptionsRouteImport } from './routes/_protected/consumptions'
import { Route as ProtectedSettingsSectionRouteImport } from './routes/_protected/settings.$section'

const WelcomeRoute = WelcomeRouteImport.update({
  id: '/welcome',
  path: '/welcome',
  getParentRoute: () => rootRouteImport,
} as any)
const SsoCallbackRoute = SsoCallbackRouteImport.update({
  id: '/sso-callback',
  path: '/sso-callback',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedSettingsRoute = ProtectedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedResourcesRoute = ProtectedResourcesRouteImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedHomeRoute = ProtectedHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedConsumptionsLimitsRoute =
  ProtectedConsumptionsLimitsRouteImport.update({
    id: '/consumptions-limits',
    path: '/consumptions-limits',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedConsumptionsRoute = ProtectedConsumptionsRouteImport.update({
  id: '/consumptions',
  path: '/consumptions',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedSettingsSectionRoute =
  ProtectedSettingsSectionRouteImport.update({
    id: '/$section',
    path: '/$section',
    getParentRoute: () => ProtectedSettingsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRoute
  '/sso-callback': typeof SsoCallbackRoute
  '/welcome': typeof WelcomeRoute
  '/consumptions': typeof ProtectedConsumptionsRoute
  '/consumptions-limits': typeof ProtectedConsumptionsLimitsRoute
  '/home': typeof ProtectedHomeRoute
  '/resources': typeof ProtectedResourcesRoute
  '/settings': typeof ProtectedSettingsRouteWithChildren
  '/': typeof ProtectedIndexRoute
  '/settings/$section': typeof ProtectedSettingsSectionRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRoute
  '/sso-callback': typeof SsoCallbackRoute
  '/welcome': typeof WelcomeRoute
  '/consumptions': typeof ProtectedConsumptionsRoute
  '/consumptions-limits': typeof ProtectedConsumptionsLimitsRoute
  '/home': typeof ProtectedHomeRoute
  '/resources': typeof ProtectedResourcesRoute
  '/settings': typeof ProtectedSettingsRouteWithChildren
  '/': typeof ProtectedIndexRoute
  '/settings/$section': typeof ProtectedSettingsSectionRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/auth': typeof AuthRoute
  '/sso-callback': typeof SsoCallbackRoute
  '/welcome': typeof WelcomeRoute
  '/_protected/consumptions': typeof ProtectedConsumptionsRoute
  '/_protected/consumptions-limits': typeof ProtectedConsumptionsLimitsRoute
  '/_protected/home': typeof ProtectedHomeRoute
  '/_protected/resources': typeof ProtectedResourcesRoute
  '/_protected/settings': typeof ProtectedSettingsRouteWithChildren
  '/_protected/': typeof ProtectedIndexRoute
  '/_protected/settings/$section': typeof ProtectedSettingsSectionRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/sso-callback'
    | '/welcome'
    | '/consumptions'
    | '/consumptions-limits'
    | '/home'
    | '/resources'
    | '/settings'
    | '/'
    | '/settings/$section'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/sso-callback'
    | '/welcome'
    | '/consumptions'
    | '/consumptions-limits'
    | '/home'
    | '/resources'
    | '/settings'
    | '/'
    | '/settings/$section'
  id:
    | '__root__'
    | '/_protected'
    | '/auth'
    | '/sso-callback'
    | '/welcome'
    | '/_protected/consumptions'
    | '/_protected/consumptions-limits'
    | '/_protected/home'
    | '/_protected/resources'
    | '/_protected/settings'
    | '/_protected/'
    | '/_protected/settings/$section'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  AuthRoute: typeof AuthRoute
  SsoCallbackRoute: typeof SsoCallbackRoute
  WelcomeRoute: typeof WelcomeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/welcome': {
      id: '/welcome'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof WelcomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sso-callback': {
      id: '/sso-callback'
      path: '/sso-callback'
      fullPath: '/sso-callback'
      preLoaderRoute: typeof SsoCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/settings': {
      id: '/_protected/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/resources': {
      id: '/_protected/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ProtectedResourcesRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/home': {
      id: '/_protected/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof ProtectedHomeRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/consumptions-limits': {
      id: '/_protected/consumptions-limits'
      path: '/consumptions-limits'
      fullPath: '/consumptions-limits'
      preLoaderRoute: typeof ProtectedConsumptionsLimitsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/consumptions': {
      id: '/_protected/consumptions'
      path: '/consumptions'
      fullPath: '/consumptions'
      preLoaderRoute: typeof ProtectedConsumptionsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/settings/$section': {
      id: '/_protected/settings/$section'
      path: '/$section'
      fullPath: '/settings/$section'
      preLoaderRoute: typeof ProtectedSettingsSectionRouteImport
      parentRoute: typeof ProtectedSettingsRoute
    }
  }
}

interface ProtectedSettingsRouteChildren {
  ProtectedSettingsSectionRoute: typeof ProtectedSettingsSectionRoute
}

const ProtectedSettingsRouteChildren: ProtectedSettingsRouteChildren = {
  ProtectedSettingsSectionRoute: ProtectedSettingsSectionRoute,
}

const ProtectedSettingsRouteWithChildren =
  ProtectedSettingsRoute._addFileChildren(ProtectedSettingsRouteChildren)

interface ProtectedRouteChildren {
  ProtectedConsumptionsRoute: typeof ProtectedConsumptionsRoute
  ProtectedConsumptionsLimitsRoute: typeof ProtectedConsumptionsLimitsRoute
  ProtectedHomeRoute: typeof ProtectedHomeRoute
  ProtectedResourcesRoute: typeof ProtectedResourcesRoute
  ProtectedSettingsRoute: typeof ProtectedSettingsRouteWithChildren
  ProtectedIndexRoute: typeof ProtectedIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedConsumptionsRoute: ProtectedConsumptionsRoute,
  ProtectedConsumptionsLimitsRoute: ProtectedConsumptionsLimitsRoute,
  ProtectedHomeRoute: ProtectedHomeRoute,
  ProtectedResourcesRoute: ProtectedResourcesRoute,
  ProtectedSettingsRoute: ProtectedSettingsRouteWithChildren,
  ProtectedIndexRoute: ProtectedIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  AuthRoute: AuthRoute,
  SsoCallbackRoute: SsoCallbackRoute,
  WelcomeRoute: WelcomeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
