// <auto-generated />
using System;
using System.Collections.Generic;
using Kijk.Infrastructure.Persistence;
using Kijk.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kijk.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "creator_type", new[] { "system", "user" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kijk.Domain.Entities.Consumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<Guid>("HouseholdId")
                        .HasColumnType("uuid")
                        .HasColumnName("household_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.ComplexProperty<Dictionary<string, object>>("Date", "Kijk.Domain.Entities.Consumption.Date#MonthYear", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("date");
                        });

                    b.HasKey("Id")
                        .HasName("pk_consumptions");

                    b.HasIndex("HouseholdId")
                        .HasDatabaseName("ix_consumptions_household_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_consumptions_name");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("ix_consumptions_resource_id");

                    b.ToTable("consumptions", (string)null);
                });

            modelBuilder.Entity("Kijk.Domain.Entities.ConsumptionLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<decimal>("ActualValue")
                        .HasColumnType("numeric")
                        .HasColumnName("actual_value");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<Guid>("HouseholdId")
                        .HasColumnType("uuid")
                        .HasColumnName("household_id");

                    b.Property<decimal>("Limit")
                        .HasColumnType("numeric")
                        .HasColumnName("limit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Period")
                        .HasColumnType("integer")
                        .HasColumnName("period");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("resource_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("LastOccurrence", "Kijk.Domain.Entities.ConsumptionLimit.LastOccurrence#MonthYear", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("last_occurrence");
                        });

                    b.HasKey("Id")
                        .HasName("pk_consumptions_limits");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_consumptions_limits_created_by_id");

                    b.HasIndex("HouseholdId")
                        .HasDatabaseName("ix_consumptions_limits_household_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_consumptions_limits_name");

                    b.HasIndex("ResourceId")
                        .HasDatabaseName("ix_consumptions_limits_resource_id");

                    b.ToTable("consumptions_limits", (string)null);
                });

            modelBuilder.Entity("Kijk.Domain.Entities.Household", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_households");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_households_name");

                    b.ToTable("households", (string)null);
                });

            modelBuilder.Entity("Kijk.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_permissions_name");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("Kijk.Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("#89CEA4")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<CreatorType>("CreatorType")
                        .HasColumnType("creator_type")
                        .HasColumnName("creator_type");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_resources");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_resources_name");

                    b.HasIndex("Name", "Unit")
                        .IsUnique()
                        .HasDatabaseName("ix_resources_name_unit");

                    b.ToTable("resources", (string)null);
                });

            modelBuilder.Entity("Kijk.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Kijk.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AuthId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("auth_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("FirstTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("first_time");

                    b.Property<string>("Image")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("AuthId")
                        .HasDatabaseName("ix_users_auth_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Kijk.Domain.Entities.UserHousehold", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("HouseholdId")
                        .HasColumnType("uuid")
                        .HasColumnName("household_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId", "HouseholdId")
                        .HasName("pk_user_households");

                    b.HasIndex("HouseholdId")
                        .HasDatabaseName("ix_user_households_household_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_user_households_is_active");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_households_role_id");

                    b.ToTable("user_households", (string)null);
                });

            modelBuilder.Entity("roles_permissions", b =>
                {
                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("permissions_id");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid")
                        .HasColumnName("roles_id");

                    b.HasKey("PermissionsId", "RolesId")
                        .HasName("pk_roles_permissions");

                    b.HasIndex("RolesId")
                        .HasDatabaseName("ix_roles_permissions_roles_id");

                    b.ToTable("roles_permissions", (string)null);
                });

            modelBuilder.Entity("user_households_permissions", b =>
                {
                    b.Property<Guid>("UserHouseHoldExtraPermissionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_house_hold_extra_permissions_id");

                    b.Property<Guid>("UserHouseholdsUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_households_user_id");

                    b.Property<Guid>("UserHouseholdsHouseholdId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_households_household_id");

                    b.HasKey("UserHouseHoldExtraPermissionsId", "UserHouseholdsUserId", "UserHouseholdsHouseholdId")
                        .HasName("pk_user_households_permissions");

                    b.HasIndex("UserHouseholdsUserId", "UserHouseholdsHouseholdId")
                        .HasDatabaseName("ix_user_households_permissions_user_households_user_id_user_ho");

                    b.ToTable("user_households_permissions", (string)null);
                });

            modelBuilder.Entity("users_resources", b =>
                {
                    b.Property<Guid>("ResourcesId")
                        .HasColumnType("uuid")
                        .HasColumnName("resources_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ResourcesId", "UserId")
                        .HasName("pk_users_resources");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_users_resources_user_id");

                    b.ToTable("users_resources", (string)null);
                });

            modelBuilder.Entity("Kijk.Domain.Entities.Consumption", b =>
                {
                    b.HasOne("Kijk.Domain.Entities.Household", "Household")
                        .WithMany("Consumptions")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_consumptions_households_household_id");

                    b.HasOne("Kijk.Domain.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_consumptions_resources_resource_id");

                    b.Navigation("Household");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Kijk.Domain.Entities.ConsumptionLimit", b =>
                {
                    b.HasOne("Kijk.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_consumptions_limits_users_created_by_id");

                    b.HasOne("Kijk.Domain.Entities.Household", "Household")
                        .WithMany("ConsumptionLimits")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_consumptions_limits_households_household_id");

                    b.HasOne("Kijk.Domain.Entities.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_consumptions_limits_resources_resource_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("Household");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Kijk.Domain.Entities.UserHousehold", b =>
                {
                    b.HasOne("Kijk.Domain.Entities.Household", "Household")
                        .WithMany("UserHouseholds")
                        .HasForeignKey("HouseholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_households_households_household_id");

                    b.HasOne("Kijk.Domain.Entities.Role", "Role")
                        .WithMany("UserHouseholds")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_households_roles_role_id");

                    b.HasOne("Kijk.Domain.Entities.User", "User")
                        .WithMany("UserHouseholds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_households_users_user_id");

                    b.Navigation("Household");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("roles_permissions", b =>
                {
                    b.HasOne("Kijk.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roles_permissions_permissions_permissions_id");

                    b.HasOne("Kijk.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roles_permissions_roles_roles_id");
                });

            modelBuilder.Entity("user_households_permissions", b =>
                {
                    b.HasOne("Kijk.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("UserHouseHoldExtraPermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_households_permissions_permissions_user_house_hold_ext");

                    b.HasOne("Kijk.Domain.Entities.UserHousehold", null)
                        .WithMany()
                        .HasForeignKey("UserHouseholdsUserId", "UserHouseholdsHouseholdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_households_permissions_user_households_user_households");
                });

            modelBuilder.Entity("users_resources", b =>
                {
                    b.HasOne("Kijk.Domain.Entities.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_resources_resources_resources_id");

                    b.HasOne("Kijk.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_resources_users_user_id");
                });

            modelBuilder.Entity("Kijk.Domain.Entities.Household", b =>
                {
                    b.Navigation("ConsumptionLimits");

                    b.Navigation("Consumptions");

                    b.Navigation("UserHouseholds");
                });

            modelBuilder.Entity("Kijk.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserHouseholds");
                });

            modelBuilder.Entity("Kijk.Domain.Entities.User", b =>
                {
                    b.Navigation("UserHouseholds");
                });
#pragma warning restore 612, 618
        }
    }
}
